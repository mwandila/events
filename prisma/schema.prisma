
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  ORGANIZER
  VENDOR
  USER
}

enum EventCategory {
  WEDDING
  FUNERAL
  BUSINESS
  MUSIC
  LIFESTYLE_EVENTS
  EDUCATIONAL_EVENTS
  HOLIDAY_CELEBRATIONS
  FASHION_SHOWS
  HEALTH_AND_WELLNESS
  CULTURAL_FESTIVALS
  GAMING_EVENTS
  ENVIRONMENTAL_EVENTS
  TRADE_FAIR
  AGRICULTURAL_AND_COMMECIAL_SHOW
  WEB_DEVELOPMENT
  MARKETING
  TECHNOLOGY
  CONCERTS_AND_CHURCH
  CONFERENCES_AND_WORKSHOPS
  SPORTS_AND_FITNESS
  ARTS_AND_THEATER
  FAMILY_AND_KIDS
  FOOD_AND_DRINK
  CHARITY_AND_FUNDRAISERS
  COMEDY_SHOWS
  NETWORKING_AND_SOCIAL_GATHERINGS
  FILM_SCREENINGS
}

enum EventType {
  PHYSICAL
  ONLINE
  HYBRID
}

enum EventStatus {
  Draft 
  Published
  Cancelled
  Completed
}

enum TicketType {
  REGULAR
  VIP
  EARLY_BIRD
  GROUP
}

enum SponsorshipTier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum OrganizerSubscriptionTier {
  DIAMOND
  GOLD
  SILVER
  NONE
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TICKET_SALE
  REFUND
  SUBSCRIPTION_PAYMENT
  PAYOUT
  PROMOTION_PAYMENT
  PRODUCT_SALE
}

enum MarketingCampaignType {
  EMAIL
  PUSH_NOTIFICATION
  SMS
  SOCIAL_MEDIA
}

enum PromotionTier {
  STANDARD
  PREMIUM
  ELITE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  accessToken           String?                @unique
  accounts              Account[]
  TwoFactorConfirmation TwoFactorConfirmation?
  events                Event[]                // Only for ORGANIZER and VENDOR roles
  orders                Order[]
  tickets               Ticket[]
  accountBalance        Float                  @default(0)
  isNewCustomer         Boolean                @default(true)
  lastPurchaseDate      DateTime?
  subscriptionTier      OrganizerSubscriptionTier @default(NONE)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  financialTransactions FinancialTransaction[]
  reviews               Review[]
  managedBy             User?                  @relation("UserManagement", fields: [managedById], references: [id])
  managedById           String?
  managedUsers          User[]                 @relation("UserManagement")
  followers             Follow[]               @relation("UserFollowers")
  following             Follow[]               @relation("UserFollowing")
  marketingPreferences  MarketingPreference?
  receivedCampaigns     MarketingCampaignRecipient[]
  feedback              Feedback[]
  notifications         Notification[]
  waitlists             Waitlist[]
  products              Product[]              // For VENDOR role
  services              Service[]              // For VENDOR role
  nfcCards              NFCCard[]
  productTransactions   ProductTransaction[]

  @@index([createdAt])
  @@index([emailVerified])
  @@index([subscriptionTier])
  @@index([role])
}

model Event {
  id                Int              @id @default(autoincrement())
  imagePath         String?
  title             String
  description       String
  dateStart         DateTime         @map("date_start")
  dateEnd           DateTime         @map("date_end")
  location          String
  category          EventCategory
  timeStart         String           @map("time_start")
  timeEnd           String           @map("time_end")
  totalSeats        Int
  vipSeats          Int
  isAvailable       Boolean          @default(true)
  regularPrice      Float
  vipPrice          Float
  isFree            Boolean          @default(false)
  eventType         EventType
  status            EventStatus      @default(Draft)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  orders            Order[]
  userId            String           @map("user_id")
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets           Ticket[]
  sponsors          Sponsor[]
  analytics         AnalyticsEntry[]
  advancedAnalytics AdvancedAnalytics[]
  engagements       Engagement[]
  reviews           Review[]
  tags              Tag[]
  marketingCampaigns MarketingCampaign[]
  promotion         EventPromotion?
  waitlist          Waitlist[]
  feedback          Feedback[]
  products          Product[]
  services          Service[]

  @@index([dateStart])
  @@index([dateEnd])
  @@index([category])
  @@index([status])
  @@index([isAvailable])
  @@index([eventType])
  @@index([userId])
}

model Order {
  id        String   @id @default(uuid())
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pricePaid Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Restrict)
  tickets   Ticket[]

  @@index([createdAt])
  @@index([eventId])
  @@index([userId])
}

model Ticket {
  id        String   @id @default(uuid())
  type      TicketType
  price     Float
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nfcTag    NFCTag?

  @@index([eventId])
  @@index([userId])
  @@index([type])
  @@index([isUsed])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confimation")
}

model AnalyticsEntry {
  id                String   @id @default(cuid())
  eventId           Int
  event             Event    @relation(fields: [eventId], references: [id])
  date              DateTime
  ticketsSold       Int
  ticketsUnsold     Int
  refunds           Int
  newCustomers      Int
  existingCustomers Int
  engagements       Int
  revenue           Float
  costs             Float
  profit            Float

  @@index([date])
  @@index([eventId])
}

model AdvancedAnalytics {
  id                     String   @id @default(cuid())
  eventId                Int
  event                  Event    @relation(fields: [eventId], references: [id])
  date                   DateTime
  uniqueVisitors         Int
  averageSessionDuration Float
  bounceRate             Float
  conversionRate         Float
  revenuePerTicket       Float
  customerAcquisitionCost Float
  customerLifetimeValue   Float
  netPromoterScore       Float?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([date])
  @@index([eventId])
}

model Sponsor {
  id        String          @id @default(cuid())
  name      String
  logo      String?
  website   String?
  tier      SponsorshipTier
  amount    Float
  eventId   Int
  event     Event           @relation(fields: [eventId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([tier])
  @@index([eventId])
}

model FinancialTransaction {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  type        TransactionType
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([type])
  @@index([userId])
}

model Engagement {
  id        String   @id @default(cuid())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  clicks    Int      @default(0)
  views     Int      @default(0)
  shares    Int      @default(0)
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([eventId])
  @@index([rating])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([createdAt])
}

model MarketingPreference {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailOptIn    Boolean @default(true)
  smsOptIn      Boolean @default(false)
  pushOptIn     Boolean @default(true)
}

model MarketingCampaign {
  id          String                @id @default(cuid())
  name        String
  description String?
  type        MarketingCampaignType
  content     String
  eventId     Int?
  event       Event?                @relation(fields: [eventId], references: [id])
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  sentAt      DateTime?
  recipients  MarketingCampaignRecipient[]

  @@index([createdAt])
  @@index([eventId])
  @@index([type])
}

model MarketingCampaignRecipient {
  id         String           @id @default(cuid())
  campaignId String
  campaign   MarketingCampaign @relation(fields: [campaignId], references: [id])
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  sentAt     DateTime
  openedAt   DateTime?
  clickedAt  DateTime?

  @@unique([campaignId, userId])
  @@index([sentAt])
}

model EventPromotion {
  id            String       @id @default(cuid())
  eventId       Int          @unique
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tier          PromotionTier
  startDate     DateTime
  endDate       DateTime
  budget        Float
  impressions   Int          @default(0)
  clicks        Int          @default(0)
  conversions   Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  performances  PromotionPerformance[]

  @@index([startDate])
  @@index([endDate])
  @@index([tier])
}

model PromotionPerformance {
  id            String   @id @default(cuid())
  promotionId   String
  promotion     EventPromotion @relation(fields: [promotionId], references: [id])
  date          DateTime
  impressions   Int
  clicks        Int
  conversions   Int
  spend         Float

  @@index([date])
}
model Feedback {
  id        String   @id @default(cuid())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isRead])
}

model Waitlist {
  id        String   @id @default(cuid())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, userId])
  @@index([position])
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Float
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId           Int?
  event             Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  analytics         ProductAnalytics[]
  advancedAnalytics ProductAdvancedAnalytics[]
  transactions      ProductTransaction[]

  @@index([name])
  @@index([userId])
  @@index([eventId])
}

model ProductAnalytics {
  id                String   @id @default(cuid())
  productId         String
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  date              DateTime
  unitsSold         Int
  revenue           Float
  costs             Float
  profit            Float
  views             Int
  addToCartCount    Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([date])
  @@index([productId])
}

model ProductAdvancedAnalytics {
  id                     String   @id @default(cuid())
  productId              String
  product                Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  date                   DateTime
  conversionRate         Float
  averageOrderValue      Float
  customerAcquisitionCost Float
  customerLifetimeValue   Float
  returnRate             Float
  netPromoterScore       Float?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([date])
  @@index([productId])
}

model ProductTransaction {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity    Int
  unitPrice   Float
  totalAmount Float
  type        TransactionType
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@index([type])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int      // Duration in minutes
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId     Int?
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([userId])
  @@index([eventId])
}

model NFCTag {
  id            String   @id @default(cuid())
  uid           String   @unique // Unique identifier for the NFC tag
  isActive      Boolean  @default(true)
  lastScanned   DateTime?
  ticketId      String?  @unique
  ticket        Ticket?  @relation(fields: [ticketId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([uid])
  @@index([isActive])
}

model NFCCard {
  id            String   @id @default(cuid())
  uid           String   @unique // Unique identifier for the NFC card
  isActive      Boolean  @default(true)
  lastUsed      DateTime?
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([uid])
  @@index([isActive])
  @@index([userId])
}